---
import Layout from "@/layouts/Layout.astro";
import Hero from "@sections/Hero.astro";
import HalfTextHalfImage from "@sections/HalfTextHalfImage.astro";
import Quote from "@sections/Quote.astro";
import Navbar from "@sections/Navbar.astro";
import Footer from "@sections/Footer.astro";
import Features from "@sections/Features/index.astro";
import Container from "@sections/Container.astro";
import FAQ from "@sections/FAQ.astro";
import RenderMarkdown from "@/components/RenderMarkdown.astro";
import sectionsImage from "@/assets/sections.png";
import deployToNetlifyImage from "@/assets/deploy.png";
import fullStackImage from "@/assets/full-stack.png";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("fr");

const features = [
    { title: "Astro", description: "The simplest web metaframework" },
    { title: "Alpine.js", description: "Used for client-side interactivity" },
    { title: "HTMX", description: "Used for sending HTML partials over the wire" },
    { title: "daisyUI", description: "Easy as Bootstrap; built upon Tailwind" },
    { title: "Clerk Auth", description: "The simplest authentication solution" },
    { title: "Astro DB", description: "An approachable database solution" }
];
const faqItems = [
    {
        question: t("faq_question_1"),
        answer: t("faq_answer_1")
    },
    {
        question: t("faq_question_2"),
        answer: t("faq_answer_2")
    },
    {
        question: t("faq_question_3"),
        answer: t("faq_answer_3")
    },
    {
        question: t("faq_question_4"),
        answer: t("faq_answer_4")
    },
    {
        question: t("faq_question_5"),
        answer: t("faq_answer_5")
    },
    {
        question: t("faq_question_6"),
        answer: t("faq_answer_6")
    },
    {
        question: t("faq_question_7"),
        answer: t("faq_answer_7")
    },
    {
        question: t("faq_question_8"),
        answer: t("faq_answer_8")
    },
    {
        question: t("faq_question_9"),
        answer: t("faq_answer_9")
    }
];
export const prerender = true;
// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate");
// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000");
// Tag the page with the project slug
Astro.response.headers.set("netlify-cache-tag", "components");
---

<Layout title={t("welcome")} description={t("description")}>
  <Navbar
    title={t("hero_title")}
    links={[
      { text: t("navbar_blog"), href: "/posts" },
      { text: t("navbar_sign_in"), href: "/sign-in" }
    ]}
  />
  <Hero
    title={t("hero_title")}
    subtitle={t("hero_subtitle")}
    ctaText={t("hero_cta_text")}
    ctaHref={t("hero_cta_href")}
    secondaryCtaText={t("hero_secondary_cta_text")}
    secondaryCtaHref={t("hero_secondary_cta_href")}
  />
  {
    /*
      Using HTMX to grab the GitHub stars count without reloading the page.
      Doing this approach versus using server defer for an Astro component is to showcase
      what's possible if you want to update a DOM element without having to mutate the Astro component.
    */
  }
  <div class="hidden" hx-get="/api/htmx-partials/github-stars" hx-trigger="load" hx-swap="innerHTML"></div>
  <HalfTextHalfImage
    title={t("half_text_half_image_title_1")}
    subtitle={t("half_text_half_image_subtitle_1")}
    image={fullStackImage.src}
  />
  <HalfTextHalfImage
    title={t("half_text_half_image_title_2")}
    subtitle={t("half_text_half_image_subtitle_2")}
    image={sectionsImage.src}
    reverse
  />
  <HalfTextHalfImage
    title={t("half_text_half_image_title_3")}
    subtitle={t("half_text_half_image_subtitle_3")}
    image={deployToNetlifyImage.src}
  />
  <Quote quote={t("quote_quote")} title={t("quote_title")} author={t("quote_author")} />
  <Features features={features} />

  <Container title={t("features_title")} align="center">
    <div class="bg-white p-6 rounded-xl border-2 border-slate-200 w-full text-xl leading-relaxed">
      <RenderMarkdown content={t("letter_content_markdown")} />
    </div>
  </Container>

  <FAQ title={t("faq_title")} items={faqItems} />

  <Footer
    links={[
      {
        title: t("footer_resources_title"),
        items: t("footer_resources_items", { returnObjects: true })
      },
      {
        title: t("footer_legal_title"),
        items: t("footer_legal_items", { returnObjects: true })
      }
    ]}
  />
</Layout>
